****************************************************************************************************
                                    Overview
****************************************************************************************************

After completing the CSS section you should be familiar with the following concepts:

    Selectors
    Properties
    the box model
    Adding a CSS File to an HTML File


****************************************************************************************************
                                    What is CSS?
****************************************************************************************************

When we reviewed HTML, we made a comparison to building a house. 
The HTML is the drywall, windows, shingles, sinks, lumber, etc...it is the building blocks and provides 
the base structure of the house. CSS is the blueprint for the house. 

CSS provides more control over the positioning of elements, colors, styles, shadows, animations and more. 

CSS stands for "Cascading Style Sheets," we'll discuss the "Cascade" in an upcoming section,
 for now just think of it as style sheets.


CSS is content oriented and is a bunch of rules we provide the browser. 
The browser applies the rules to elements (HTML elements) that we specify. 

CSS rules have two core components:

    Identify elements in the document (web page) we want to style
    Describe what styles (or positioning rules) to apply to the selected elements



For example, here is an <h1> element:

    <h1> Change the text color </h1>


How can we change the text color to green? 
We can't change the text color to green using HTML, let's see how to conquer this using CSS.


ELEMENT SELECTOR:

Looking at the two steps in creating a CSS rule, the first rule is to identify aka "select" the element we want to style. 
This is called a CSS Selector. 

There are a lot of different ways to select an element on a webpage, 
the first type of selector we'll explore is an element selector.

To select an element, call the element name (the tag name) and follow it with opening and closing brackets:

    h1 {

    }

Congrats, we wrote our first element selector! The selector is h1. 

The selector will select ALL elements that meet the selector's criteria. 
Our selector selects all h1 elements on the page (not just the first one, all of them).


PROPERTIES:

    h1 {
    color: green;

    }

Everything placed inside the brackets (the declaration block) are declarations.

A declaration is a CSS property assigned to a value. 

Every declaration separates the property/value pair with a colon and it ends with a semicolon (check the example above).

A CSS property describes the specific CSS feature to apply to the element selected, 
such as the color, size, or type of font. 

There are roughly 360 CSS properties (most of the time, you will only use 50 - 100 of them).

Properties are assigned values, in this case, the color property is assigned the color "green". 

CSS knows a lot of colors by their name, but you can also assign the color property a hex, RGB value, and more!

Here is the final outcome when meshing our CSS and HTML together:

    <style>
    h1 {
        color: green;
    }
    </style>

    <h1> The color is GREEN </h1>


WHERE TO ADD CSS?

In the example above, the CSS rule was added in a <style> tag. 

This isn't considered a "best-practice", but for the purpose of this example, 
it is a demonstration of adding CSS that interacts with your HTML. 

In an upcoming section, we'll introduce how to add CSS to HTML using a <link> tag and a separate CSS file. 
For now, we'll stick with the <style> tag.


ADDING MORE PROPERTIES

Let's take the <h1> example one step further and add additional properties.


Challenge: Add additional Properties

Add the following properties to the <h1> element (the previous codepen is editable):

    Add a background color (pick any color)
    Change the border to a solid border instead of a "dotted" border
    Add the font-family 'cursive'


****************************************************************************************************
                                    CSS Element Selectors
****************************************************************************************************


PARENT AND CHILD ELEMENTS:

Review the following CSS Selectors and where the properties are applied to the page:

    <style>

    div {
        color: blue;
        font-family: cursive;
    }
    
    ul {
        color: red;    
    }
    </style>


    <div>
    <h2> Grocery List </h2>
    <h4> - the three c's </h4>

    <ul>
        <li>Coffee</li>
        <li>Cheese</li>
        <li>Chips</li>
    </ul>  
    </div>


We selected two elements, the <div> and <ul> elements, but notice the font-family and color properties are 
applied to additional elements (not just the <ul> or <div> elements).


All of the text on the page is cursive which is a CSS rule set on the <div> element. 

Since all of the elements are nested inside of the <div> element, they are descendants of the <div> element 
(the <div> is the parent element). 

Properties have a built-in property named "inherited", you can view it for the font-family property here. 
It is set to yes, which means descendants of the element will inherit the property as long as they don't have the same rule.


For example, the <ul> element and its children (the <li> elements) have a color declaration set to red. 

Even though the <ul> element is a descendant of the <div>, since it has its own color rule with the value red, 
it will override the rule set by its parent (or ancestor). 

for now, if we want to determine what is inherited we will look at the properties documentation to 
see its inherited property and if it is "yes", we know that all descendants will inherit the property.


Inheritance has more complexity in CSS than what we just described, such as determining the computed value, 
we'll take a look at computed values soon!



****************************************************************************************************
                                    ID & Class Selectors
****************************************************************************************************

We already used element selectors. Element selectors need two main components:

    The element name we want to select
    A declaration block that holds each declaration or rules


Up until this point, when we've used element selectors, the rules are applied to every element on 
the page that matches the selector. 


For example, if we have an unordered list with list elements, how can we apply rules to specific <li> elements 
    instead of ALL <li> elements which we did in previous exercises with the <li> element selector?

Let's take a look at selecting elements on a web page using HTML class and id attributes.

HTML .CLASS ATTRIBUTE:

The "class" attribute is assigned a name that describes what the class represents. 

The name of the class can be re-used, and it allows multiple elements on a webpage to have 
the same styles and CSS rules. 

You might be saying, can't we just use inheritance for that? 
The answer is, maybe but it isn't the best option. 

As your HTML documents and CSS rules grow in size, it is harder to manage and trace what each element inherits. 

Instead, you can add a class to an element, and the CSS rules of the class will be applied to the element.

For example, how can we make the "good" habits green text, and the "bad" habits red text with a 
line through text-decoration in the example below?

    <h1> Good vs Bad Habits </h1>
    <ul>
    <li>Eating Junk Food</li>
    <li>Watching Netflix all night</li>
    <li>Studying during Foundations :) </li>
    <li>Going to bed at a decent hour</li>  
    </ul>

Selecting the <li> elements with an element selector, the rules are applied to every <li> element, 
but instead, we can create two classes, 
one for "good" habits and one for "bad" habits to apply different rules to the <li> elements we want.  

    <h1> Good vs Bad Habits </h1>
    <ul>
    <li class='bad-habit'>Eating Junk Food</li>
    <li class='good-habit'>Studying during Foundations :) </li>
    <li class='bad-habit'>Watching Netflix all night</li>
    <li class='good-habit'>Going to bed at a decent hour</li>  
    </ul>
    
In the example, we added class attributes to all of the <li> elements. 

There are two classes, "good-habit" and "bad-habit". 
Now, we need to use a CSS Selector to select the classes and apply styling rules.


To select a class using CSS, write the name of the class preceded by a 'dot'. 

Review the example below (selecting the .good-habit and .bad-habit classes.
  

    .good-habit {
    color: limegreen;
    }

    .bad-habit {

    color: red;
    text-decoration: line-through;

    }


HTML #ID ATTRIBUTE:

The HTML ID attribute behaves a lot like the class attribute except for one big difference, 
it can only be applied to one element on the page. 

It is used often with headers on a webpage. ID's have a name, just like classes. 

You can have multiple ID's, but you can only assign the ID once, 
you can't re-use it on additional elements on the page, it is unique. 

ID's are used often when the styling is only used in one section of the page, 
such as a header section, navigation bar, or the footer. 

The ID attribute is also heavily used when javascript is used to manipulate HTML Elements.



Let's focus on the main topic, the ID attribute, and ID CSS selector. There are a few different ID's used in our HTML:

    main
    header
    first
    second
    third
    fourth
    fifth


The CSS selector for an ID starts with a "hash" # followed by the name of the ID. 

Check the syntax in the CSS file. In the CSS file, we add styling for main, and header, 
but notice there isn't additional styling for the ID's first-fifth, so why did we add them?


Unlike classes, IDs have a unique browser ability that works with links (anchor elements). 

Scroll to the top of the page in the example, and click on "second post" or the "fifth post" link, 
did you notice any special behavior? 

You should have jumped to the section of the page that has that post. 

Looking at the anchor elements (<a>) in the HTML file, notice the href attributes, they link to an ID. 

If you've ever seen a "#" aka hash value, this is what the hash value is; it is an ID.

We've used hash value links often throughout this workshop and others when providing links to documentation, 
e.g. https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#Linking_to_another_section_on_the_same_page. 

The link has a hash, which is an ID on the page linked, when you click on the link, 
it jumps to the section with the ID instead of loading the page from the top.



Another key takeaway from the example is that elements can have classes and IDs. 

Classes and IDs are used throughout CSS to style multiple or specific elements on a page. 

They provide more control since you can add them to any element on your page.



****************************************************************************************************
                                    Group Selectors
****************************************************************************************************

Up to this point, we've looked at 3 types of selectors in CSS:

element (type) selectors
.class selectors
#id selectors
As we've seen, these selectors can provide a lot of control over HTML elements on a web page. 
Let's take a look at group selectors, which allow us to define multiple rules on a group of elements all at once.


For example, let's say we want all of our header elements (<h1> - <h6>) to use the font-family "fantasy" 
and color "teal". 

Two options come to mind

    Add the rules using an element selector
    create a class and assign it to every header element when used


These are both options...but there is an easier way to solve this common scenario. 
We can use the group selector. Here is what it looks like:
    <style>
    h1, h2, h3, h4, h5, h6 {
        font-family: fantasy;
        color: teal;
    }
    
    
    </style>

    <h1>Group</h1>
    <h2>Selectors</h2>
    <h3>Are</h3>
    <h4>Super</h4>
    <h5>Great</h5>
    <h6>What do you think?</h6>


Here is the selector group syntax again:

    h1, h2, h3, h4, h5, h6 {
    font-family: fantasy;
    color: teal;
    }


This is more convenient compared to creating a class and more readable than creating 
individual rulesets for each element. 

You can use the group selector for any element. 

Group selectors are commonly used to create a general theme or have consistency on a page.

